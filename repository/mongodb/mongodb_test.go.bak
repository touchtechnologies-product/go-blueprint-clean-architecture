package mongodb

import (
	"blueprint/config"
	domain "blueprint/domain/company"
	"blueprint/service/util"
	"context"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/suite"
	"github.com/uniplaces/carbon"
	"go.mongodb.org/mongo-driver/bson"
)

const collName = "RoomMock"

type MongoDBTestSuite struct {
	suite.Suite
	ctx  context.Context
	repo *Repository
}

func (suite *MongoDBTestSuite) SetupSuite() {
	suite.ctx = context.Background()
	timeStr := "2020-10-01T14:54:35+07:00"
	t, err := carbon.Parse(time.RFC3339, timeStr, "Africa/Kampala")
	results := t.String()
	suite.NoError(err)
	suite.Equal(results, timeStr)
}

func (suite *MongoDBTestSuite) SetupTest() {
	appConfig := config.Get()
	var err error
	suite.repo, err = New(suite.ctx, appConfig.MongoDBEndpoint, appConfig.MongoDBName, collName)
	suite.NoError(err)
	suite.NotNil(suite.repo)
	suite.NoError(err)
}

func (suite *MongoDBTestSuite) TearDownTest() {
	_, _ = suite.repo.coll.DeleteMany(suite.ctx, bson.M{})
}

func (suite *MongoDBTestSuite) TearDownSuite() {
	_ = suite.repo.db.Drop(suite.ctx)
}

func TestMongoDBTestSuite(t *testing.T) {
	suite.Run(t, new(MongoDBTestSuite))
}

func (suite *MongoDBTestSuite) TestCreate() {
	ID, err := suite.repo.Create(suite.ctx, domain.Create("cid", "cname"))
	suite.NoError(err)
	suite.NotEmpty(ID)
}

func (suite *MongoDBTestSuite) TestList() {
	company1 := domain.Create("cid", "cname")
	_, err := suite.repo.Create(suite.ctx, company1)
	suite.NoError(err)
	time.Sleep(5 * time.Second)
	company2 := domain.Create("cid", "cname")
	company2.Name = "cname2"
	_, err = suite.repo.Create(suite.ctx, company2)
	suite.NoError(err)

	typeGuide := domain.Create("cid", "cname")
	utilOpt := &util.ListOption{
		Page:    1,
		PerPage: 10,
	}
	total, items, err := suite.repo.List(suite.ctx, utilOpt, typeGuide)

	suite.NoError(err)
	suite.Equal(2, total)
	suite.Equal(2, len(items))
}

func (suite *MongoDBTestSuite) TestRead() {
	company := domain.Create("cid", "cname")
	expect := domain.Create("cid", "cname")

	_, _ = suite.repo.Create(suite.ctx, company)
	filters := map[string]interface{}{"id": company.Id}
	err := suite.repo.Read(suite.ctx, filters, expect)

	suite.NoError(err)
	suite.Equal(company.Id, expect.Id)
}

func (suite *MongoDBTestSuite) TestUpdate() {
	company := domain.Create("cid", "cname")
	_, _ = suite.repo.Create(suite.ctx, company)
	filters := map[string]interface{}{"id": company.Id}

	company.Name = "test update"
	err := suite.repo.Update(suite.ctx, filters, company)
	suite.NoError(err)

	expect := domain.Create("cid", "cname")
	err = suite.repo.Read(suite.ctx, filters, expect)

	suite.NoError(err)
	suite.Equal(company.Name, expect.Name)
}

func (suite *MongoDBTestSuite) TestDelete() {
	company := domain.Create("cid", "cname")
	filters := map[string]interface{}{"id": company.Id}
	_, _ = suite.repo.Create(suite.ctx, company)
	err := suite.repo.Delete(suite.ctx, filters)
	suite.NoError(err)
}

func (suite *MongoDBTestSuite) TestSearchList() {
	company1 := domain.Create("cid", "cname")
	company2 := domain.Create("cid", "cname")
	company2.Name = "test1"
	_, _ = suite.repo.Create(suite.ctx, company1)
	_, _ = suite.repo.Create(suite.ctx, company2)
	opt := &util.ListOption{
		Page:    1,
		PerPage: 10,
	}
	opt.Filters = map[string]interface{}{"name": map[string]interface{}{"$regex": "1"}}
	total, items, err := suite.repo.List(suite.ctx, opt, domain.Create("cid", "cname"))
	suite.NoError(err)
	suite.Equal(1, total)
	suite.Equal(1, len(items))
}

func (suite *MongoDBTestSuite) TestPush() {
	company := domain.Create("cid", "cname")
	opt := &util.SetOpParam{
		ID:           "test",
		SetFieldName: "queue",
		Item:         "www",
	}

	_, _ = suite.repo.Create(suite.ctx, company)
	err := suite.repo.Push(suite.ctx, opt)
	suite.NoError(err)

	filters := map[string]interface{}{"id": company.Id}
	expect := domain.Create("cid", "cname")
	err = suite.repo.Read(suite.ctx, filters, expect)

	suite.NoError(err)
	suite.Equal(company.Id, expect.Id)
}

func (suite *MongoDBTestSuite) TestNewWithIncorrectURI() {
	tmp := os.Getenv("MONGODB_URI")
	_ = os.Setenv("MONGODB_URI", "some-uri")
	appConfig := config.Get()
	var err error
	suite.repo, err = New(suite.ctx, appConfig.MongoDBEndpoint, appConfig.MongoDBName, collName)
	suite.Error(err)
	_ = os.Setenv("MONGODB_URI", tmp)
}

func (suite *MongoDBTestSuite) TestListCountErr() {
	_ = suite.repo.client.Disconnect(suite.ctx)
	opt := &util.ListOption{
		Page:    1,
		PerPage: 10,
	}
	_, _, err := suite.repo.List(suite.ctx, opt, domain.Create("cid", "cname"))
	suite.Error(err)
}

func (suite *MongoDBTestSuite) TestCreateErr() {
	_, err := suite.repo.Create(suite.ctx, nil)
	suite.Error(err)
}
