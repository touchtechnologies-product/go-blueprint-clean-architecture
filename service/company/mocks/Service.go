// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	context "context"

	company "github.com/touchtechnologies-product/go-blueprint-clean-architecture/service/company"

	mock "github.com/stretchr/testify/mock"

	util "github.com/touchtechnologies-product/go-blueprint-clean-architecture/service/util"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, input
func (_m *Service) Create(ctx context.Context, input *company.CreateInput) (string, error) {
	ret := _m.Called(ctx, input)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *company.CreateInput) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *company.CreateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opt
func (_m *Service) List(ctx context.Context, opt *util.PageOption) (int, []*company.View, error) {
	ret := _m.Called(ctx, opt)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *util.PageOption) int); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []*company.View
	if rf, ok := ret.Get(1).(func(context.Context, *util.PageOption) []*company.View); ok {
		r1 = rf(ctx, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*company.View)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *util.PageOption) error); ok {
		r2 = rf(ctx, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Read provides a mock function with given fields: ctx, ID
func (_m *Service) Read(ctx context.Context, ID string) (*company.View, error) {
	ret := _m.Called(ctx, ID)

	var r0 *company.View
	if rf, ok := ret.Get(0).(func(context.Context, string) *company.View); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*company.View)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
